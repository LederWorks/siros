name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  GO_VERSION: "1.24"
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # $$$$$$$\   $$$$$$\   $$$$$$\  $$\   $$\ $$$$$$$$\ $$\   $$\ $$$$$$$\
  # $$  __$$\ $$  __$$\ $$  __$$\ $$ | $$  |$$  _____|$$$\  $$ |$$  __$$\
  # $$ |  $$ |$$ /  $$ |$$ /  \__|$$ |$$  / $$ |      $$$$\ $$ |$$ |  $$ |
  # $$$$$$$\ |$$$$$$$$ |$$ |      $$$$$  /  $$$$$\    $$ $$\$$ |$$ |  $$ |
  # $$  __$$\ $$  __$$ |$$ |      $$  $$<   $$  __|   $$ \$$$$ |$$ |  $$ |
  # $$ |  $$ |$$ |  $$ |$$ |  $$\ $$ |\$$\  $$ |      $$ |\$$$ |$$ |  $$ |
  # $$$$$$$  |$$ |  $$ |\$$$$$$  |$$ | \$$\ $$$$$$$$\ $$ | \$$ |$$$$$$$  |
  # \_______/ \__|  \__| \______/ \__|  \__|\________|\__|  \__|\_______/

  # Backend testing and linting
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: siros_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: backend/go.sum

      - name: Setup database
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          # Note: Using standard PostgreSQL for CI tests
          # pgvector extension would be available in production deployment
          PGPASSWORD=postgres psql -h localhost -U postgres -d siros_test -c "SELECT version();"

      - name: Download Go dependencies
        working-directory: ./backend
        run: go mod download

      - name: Run Go linting
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1
          working-directory: ./backend
          args: --timeout=5m

      - name: Run Go tests
        working-directory: ./backend
        run: go test -v -race -coverprofile=coverage.out ./...
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/siros_test?sslmode=disable

    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: ./backend/coverage.out
    #     flags: backend
    #     name: backend-coverage

  # $$$$$$$$\ $$$$$$$\   $$$$$$\  $$\   $$\ $$$$$$$$\ $$$$$$$$\ $$\   $$\ $$$$$$$\
  # $$  _____|$$  __$$\ $$  __$$\ $$$\  $$ |\__$$  __|$$  _____|$$$\  $$ |$$  __$$\
  # $$ |      $$ |  $$ |$$ /  $$ |$$$$\ $$ |   $$ |   $$ |      $$$$\ $$ |$$ |  $$ |
  # $$$$$\    $$$$$$$  |$$ |  $$ |$$ $$\$$ |   $$ |   $$$$$\    $$ $$\$$ |$$ |  $$ |
  # $$  __|   $$  __$$< $$ |  $$ |$$ \$$$$ |   $$ |   $$  __|   $$ \$$$$ |$$ |  $$ |
  # $$ |      $$ |  $$ |$$ |  $$ |$$ |\$$$ |   $$ |   $$ |      $$ |\$$$ |$$ |  $$ |
  # $$ |      $$ |  $$ | $$$$$$  |$$ | \$$ |   $$ |   $$$$$$$$\ $$ | \$$ |$$$$$$$  |
  # \__|      \__|  \__| \______/ \__|  \__|   \__|   \________|\__|  \__|\_______/

  # Frontend testing and linting
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Run TypeScript check
        working-directory: ./frontend
        run: npx tsc --noEmit

      - name: Run tests
        working-directory: ./frontend
        run: npm test

    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: ./frontend/coverage/lcov.info
    #     flags: frontend
    #     name: frontend-coverage

  # $$$$$$$\  $$\   $$\ $$$$$$\ $$\       $$$$$$$\
  # $$  __$$\ $$ |  $$ |\_$$  _|$$ |      $$  __$$\
  # $$ |  $$ |$$ |  $$ |  $$ |  $$ |      $$ |  $$ |
  # $$$$$$$\ |$$ |  $$ |  $$ |  $$ |      $$ |  $$ |
  # $$  __$$\ $$ |  $$ |  $$ |  $$ |      $$ |  $$ |
  # $$ |  $$ |$$ |  $$ |  $$ |  $$ |      $$ |  $$ |
  # $$$$$$$  |\$$$$$$  |$$$$$$\ $$$$$$$$\ $$$$$$$  |
  # \_______/  \______/ \______|\________|\_______/

  # Build and test the complete application
  build-test:
    name: Build Integration Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: backend/go.sum

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Build complete application
        run: |
          chmod +x ./scripts/build.sh
          chmod +x ./scripts/frontend/frontend_build.sh
          chmod +x ./scripts/backend/backend_build.sh
          ./scripts/build.sh --skip-tests

      - name: Test binary execution
        working-directory: ./build
        run: |
          timeout 10s ./siros --help || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: siros-binary
          path: build/siros
          retention-days: 7

  #  $$$$$$\   $$$$$$\   $$$$$$\  $$\   $$\
  # $$  __$$\ $$  __$$\ $$  __$$\ $$$\  $$ |
  # $$ /  \__|$$ /  \__|$$ /  $$ |$$$$\ $$ |
  # \$$$$$$\  $$ |      $$$$$$$$ |$$ $$\$$ |
  #  \____$$\ $$ |      $$  __$$ |$$ \$$$$ |
  # $$\   $$ |$$ |  $$\ $$ |  $$ |$$ |\$$$ |
  # \$$$$$$  |\$$$$$$  |$$ |  $$ |$$ | \$$ |
  #  \______/  \______/ \__|  \__|\__|  \__|

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    env:
      GO111MODULE: on

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: backend/go.sum

      - name: Download Go dependencies
        working-directory: ./backend
        run: go mod download

      - name: Verify Go modules
        working-directory: ./backend
        run: go mod verify

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Gosec Security Scanner
        working-directory: ./backend
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./...

  # $$$$$$$\   $$$$$$\   $$$$$$\  $$\   $$\ $$$$$$$$\ $$$$$$$\
  # $$  __$$\ $$  __$$\ $$  __$$\ $$ | $$  |$$  _____|$$  __$$\
  # $$ |  $$ |$$ /  $$ |$$ /  \__|$$ |$$  / $$ |      $$ |  $$ |
  # $$ |  $$ |$$ |  $$ |$$ |      $$$$$  /  $$$$$\    $$$$$$$  |
  # $$ |  $$ |$$ |  $$ |$$ |      $$  $$<   $$  __|   $$  __$$<
  # $$ |  $$ |$$ |  $$ |$$ |  $$\ $$ |\$$\  $$ |      $$ |  $$ |
  # $$$$$$$  | $$$$$$  |\$$$$$$  |$$ | \$$\ $$$$$$$$\ $$ |  $$ |
  # \_______/  \______/  \______/ \__|  \__|\________|\__|  \__|

  # Docker build and push
  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # $$$$$$$\  $$$$$$$$\ $$\       $$$$$$$$\  $$$$$$\   $$$$$$\  $$$$$$$$\
  # $$  __$$\ $$  _____|$$ |      $$  _____|$$  __$$\ $$  __$$\ $$  _____|
  # $$ |  $$ |$$ |      $$ |      $$ |      $$ /  $$ |$$ /  \__|$$ |
  # $$$$$$$  |$$$$$\    $$ |      $$$$$\    $$$$$$$$ |\$$$$$$\  $$$$$\
  # $$  __$$< $$  __|   $$ |      $$  __|   $$  __$$ | \____$$\ $$  __|
  # $$ |  $$ |$$ |      $$ |      $$ |      $$ |  $$ |$$\   $$ |$$ |
  # $$ |  $$ |$$$$$$$$\ $$$$$$$$\ $$$$$$$$\ $$ |  $$ |\$$$$$$  |$$$$$$$$\
  # \__|  \__|\________|\________|\________|\__|  \__| \______/ \________|

  # Release workflow
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: siros-binary
          path: ./artifacts

      - name: Create release assets
        run: |
          mkdir -p release
          cd artifacts
          tar -czf ../release/siros-linux-amd64.tar.gz siros-server
          cd ../release
          sha256sum *.tar.gz > checksums.txt

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/*.tar.gz
            release/checksums.txt
          generate_release_notes: true
